name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)
# Pipeline triggers on any branch and tag
trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'

resources:
  containers:
  - container: 'postgres_container_for_tests'
    image: 'postgres:12-alpine'
    ports:
      - 10112:5432
    env:
      POSTGRES_DB: $(IntegrationTests.Database.Name)
      POSTGRES_USER: $(IntegrationTests.Database.Username)
      POSTGRES_PASSWORD: $(IntegrationTests.Database.Password)
  repositories:
    - repository: templates
      type: github
      name: statisticsnorway/azure-pipelines-templates
      ref: refs/heads/dapla-templates
      endpoint: statisticsnorway

    # Pipeline will be run on this base image
pool:
  vmImage: 'ubuntu-latest'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  # Variables defined in Pipelines->Library->Variable Groups in your project in
  # Azure Pipelines
  - group: Hemmeligheter
  # Variables defined here
  - name: fullSha
    value: '$(Build.SourceVersion)'
  - name: imageName
    value: 'eu.gcr.io/prod-bip/ssb/dapla/dapla-catalog'
  - name: repoName
    value: 'prod-bip/ssb/dapla/dapla-catalog'
  - name: 'IntegrationTests.Database.Name'
    value: 'catalog'
  - name: 'IntegrationTests.Database.Username'
    value: 'catalog'
  - name: 'IntegrationTests.Database.Password'
    value: 'catalog'
  - name:  MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'



# Job which runs mvn test and verify, Sonar Analysis (if branch is master), mvn install,
# builds Docker image, pushes this to GCR and checks for any image vulnerabilities
jobs:
  - template: jobs/dapla-test-coverage-build-gcr.yml@templates
    parmeters:
      imageName: dapla-catalog

  # Job which pulls the Docker image with the correct tag (image-scan-tag) from GCR, tags this
  # with the git tag, and pushes that back to GCR.
  # Job triggers only when a tag (which starts with prod-v) was committed to GitHub
  - job: dockerTagForProd
    displayName: "Docker tag for production"
    # Job condition: trigger only on tag that starts with "prod-v"
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/prod-v'))
    steps:
      # Download file with json-key to GCR as a later task needs to
      # authenticate to GCR
      - task: DownloadSecureFile@1
        name: gcrJsonKey
        displayName: 'Download gcr creds'
        inputs:
          secureFile: 'gcr-key.json'
      # Fetches the last tag from GitHub (found no other way of doing this) and tags the image
      - script: |
          echo "Getting the latest git tag"
          TAG=`git describe --tags`
          echo $TAG
          cat $(gcrJsonKey.secureFilePath) | docker login -u _json_key --password-stdin https://eu.gcr.io
          docker pull eu.gcr.io/prod-bip/ssb/dapla/dapla-catalog:master-imagescan-$(fullSha)
          docker tag eu.gcr.io/prod-bip/ssb/dapla/dapla-catalog:master-imagescan-$(fullSha) eu.gcr.io/prod-bip/ssb/dapla/dapla-catalog:$TAG
          docker push eu.gcr.io/prod-bip/ssb/dapla/dapla-catalog:$TAG


